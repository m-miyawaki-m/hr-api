plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.7'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.diffplug.spotless' version '6.25.0' // ← コードフォーマッター
    id 'jacoco' // ← テストカバレッジ
    id 'org.owasp.dependencycheck' version '10.0.4' // ← 依存関係脆弱性チェック
}

group = 'com.example'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // --- 本体 ---
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    implementation 'com.oracle.database.jdbc:ojdbc11:23.3.0.23.09'

    // --- Lombok ---
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // --- テスト関連 ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'org.assertj:assertj-core:3.25.3' // ← アサーション強化
    testImplementation 'com.h2database:h2:2.2.224' // ← テスト用インメモリDB
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // ← テスト実行後にカバレッジレポート生成
}

// JaCoCo テストカバレッジの設定
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test // ← テスト実行を依存関係とする
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    executionData fileTree(dir: "$buildDir/jacoco", includes: ["**/*.exec"])
}

// テストカバレッジの最小基準を設定
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70%以上のカバレッジを要求
            }
        }
    }
}

// OWASP Dependency Check設定
dependencyCheck {
    format = 'ALL'
    outputDirectory = "$buildDir/reports/dependency-check"
    suppressionFile = 'dependency-check-suppressions.xml'
    failBuildOnCVSS = 7.0 // CVSS 7.0以上で失敗
    analyzers {
        // 使用しないアナライザーを無効化してパフォーマンス向上
        nodeAuditEnabled = false
        nodeEnabled = false
        composerEnabled = false
        pyDistributionEnabled = false
        pyPackageEnabled = false
        rubygemsEnabled = false
        bundleAuditEnabled = false
        assemblyEnabled = false
        nuspecEnabled = false
        nugetconfEnabled = false
        cocoapodsEnabled = false
        swiftEnabled = false
        archiveEnabled = false
        jarEnabled = true
        centralEnabled = true
        ossIndexEnabled = true
    }
}

spotless {
    java {
        googleJavaFormat('1.19.2')
        target 'src/**/*.java'
        importOrder 'java', 'javax', 'org', 'com'
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }

    // --- XML整形用 ---
    format 'xml', {
        target 'src/main/resources/**/*.xml'
        // MyBatisのMapper XMLは除外
        targetExclude 'src/main/resources/mybatis/**/*.xml'
        eclipseWtp('xml')
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }

    // --- HTML / JS / CSS 用 Prettier 設定 ---
    format 'web', {
        target 'src/main/resources/static/**/*.html',
               'src/main/resources/static/**/*.js',
               'src/main/resources/static/**/*.css'
        prettier().configFile('.prettierrc.json') // ← ここを修正！
        trimTrailingWhitespace()
        endWithNewline()
    }
}
